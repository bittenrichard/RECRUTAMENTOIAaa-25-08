# Dockerfile.backend

# --- Estágio 1: Build ---
# Usa uma imagem Node.js completa para construir a aplicação TypeScript de forma segura.
FROM node:20-slim AS builder

# Define o diretório de trabalho.
WORKDIR /app

# Copia os ficheiros de manifesto de pacotes.
COPY package*.json ./
COPY tsconfig*.json ./

# Instala TODAS as dependências (incluindo devDependencies para o build).
RUN npm ci --silent

# Copia o resto do código-fonte da sua aplicação.
COPY . .

# Executa o script de build para compilar o TypeScript para JavaScript.
RUN npm run build:server


# --- Estágio 2: Produção ---
# Usa uma imagem Node.js limpa e otimizada para a execução.
FROM node:20-slim AS production

# Cria usuário não-root para segurança
RUN groupadd -r nodeuser && useradd -r -g nodeuser nodeuser

# Define o diretório de trabalho.
WORKDIR /app

# Cria diretório de logs
RUN mkdir -p /app/logs && chown -R nodeuser:nodeuser /app

# Copia os ficheiros de manifesto de pacotes.
COPY package*.json ./

# Instala APENAS as dependências de produção, ignorando as de desenvolvimento.
RUN npm ci --only=production --silent && npm cache clean --force

# Copia o código já compilado do estágio de build anterior.
COPY --from=builder /app/dist-server ./dist-server

# Muda ownership para o usuário não-root
RUN chown -R nodeuser:nodeuser /app
USER nodeuser

# ✅ Configura variável de ambiente para produção
ENV NODE_ENV=production

# Expõe a porta em que a sua API está a ser executada.
EXPOSE 3001

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
  CMD node -e "require('http').get('http://localhost:3001/api/users/1', (res) => { process.exit(res.statusCode === 200 || res.statusCode === 400 ? 0 : 1) }).on('error', () => process.exit(1))"

# O comando final para iniciar o servidor Node.js em produção.
CMD ["node", "dist-server/server.js"]
