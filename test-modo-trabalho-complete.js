const API_BASE_URL = 'http://localhost:3001';

async function testModoTrabalhoCompleto() {
  console.log('üß™ TESTE COMPLETO: modo_trabalho no requisitos_json...');
  
  const testData = {
    titulo: 'TESTE FINAL MODO TRABALHO - ' + Date.now(),
    descricao: 'Testando salvamento do modo_trabalho no requisitos_json',
    endereco: 'S√£o Paulo, SP',
    modo_trabalho: 'h√≠brido',
    requisitos_json: JSON.stringify({
      idade: { min: '25', max: '50' },
      experiencia: 'M√≠nimo 2 anos'
    }),
    usuario: [1]
  };

  console.log('üì§ CRIANDO vaga com dados:', JSON.stringify(testData, null, 2));

  try {
    // 1. Criar vaga
    const createResponse = await fetch(`${API_BASE_URL}/api/jobs`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(testData)
    });

    if (!createResponse.ok) {
      console.log('‚ùå Erro na cria√ß√£o. Status:', createResponse.status);
      const errorText = await createResponse.text();
      console.log('‚ùå Erro:', errorText);
      return;
    }

    const createdJob = await createResponse.json();
    console.log('‚úÖ Vaga criada:', createdJob.id);
    console.log('üìÑ Requisitos JSON retornado:', createdJob.requisitos_json);
    
    // Verificar se modo_trabalho foi salvo
    if (createdJob.requisitos_json) {
      try {
        const parsed = JSON.parse(createdJob.requisitos_json);
        console.log('üîç Conte√∫do parseado:', JSON.stringify(parsed, null, 2));
        if (parsed.modo_trabalho === 'h√≠brido') {
          console.log('üéâ SUCESSO! modo_trabalho foi salvo no requisitos_json!');
        } else {
          console.log('‚ùå ERRO: modo_trabalho n√£o foi salvo corretamente');
        }
      } catch (error) {
        console.log('‚ùå Erro ao parsear JSON:', error.message);
      }
    }
    
    // 2. Aguardar e buscar dados via GET
    console.log('\n‚è≥ Aguardando 2 segundos para verificar dados...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    const dataResponse = await fetch(`${API_BASE_URL}/api/data/all/1`);
    if (dataResponse.ok) {
      const data = await dataResponse.json();
      const createdJobInData = data.jobs.find(job => job.id === createdJob.id);
      if (createdJobInData) {
        console.log('üìã Verifica√ß√£o no /api/data/all:');
        console.log('- Modo trabalho extra√≠do:', createdJobInData.modo_trabalho);
        
        if (createdJobInData.modo_trabalho === 'h√≠brido') {
          console.log('üéâ PERFEITO! modo_trabalho foi extra√≠do corretamente do requisitos_json!');
        } else {
          console.log('‚ùå ERRO: modo_trabalho n√£o foi extra√≠do corretamente');
        }
      }
    }
    
    // 3. Testar PATCH (edi√ß√£o)
    console.log('\nüîÑ TESTANDO EDI√á√ÉO da vaga...');
    const updateData = {
      titulo: 'TESTE EDITADO - ' + Date.now(),
      modo_trabalho: 'remoto', // Mudando de h√≠brido para remoto
      requisitos_json: JSON.stringify({
        idade: { min: '30', max: '60' },
        experiencia: 'M√≠nimo 3 anos',
        formacao: 'Superior completo'
      })
    };
    
    console.log('üì§ EDITANDO vaga com dados:', JSON.stringify(updateData, null, 2));
    
    const updateResponse = await fetch(`${API_BASE_URL}/api/jobs/${createdJob.id}`, {
      method: 'PATCH',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(updateData)
    });
    
    if (!updateResponse.ok) {
      console.log('‚ùå Erro na edi√ß√£o. Status:', updateResponse.status);
      const errorText = await updateResponse.text();
      console.log('‚ùå Erro:', errorText);
      return;
    }
    
    const updatedJob = await updateResponse.json();
    console.log('‚úÖ Vaga editada:', updatedJob.id);
    console.log('üìÑ Requisitos JSON atualizado:', updatedJob.requisitos_json);
    
    // Verificar se modo_trabalho foi atualizado
    if (updatedJob.requisitos_json) {
      try {
        const parsed = JSON.parse(updatedJob.requisitos_json);
        console.log('üîç Conte√∫do parseado atualizado:', JSON.stringify(parsed, null, 2));
        if (parsed.modo_trabalho === 'remoto') {
          console.log('üéâ SUCESSO! modo_trabalho foi atualizado no requisitos_json!');
        } else {
          console.log('‚ùå ERRO: modo_trabalho n√£o foi atualizado corretamente');
        }
      } catch (error) {
        console.log('‚ùå Erro ao parsear JSON atualizado:', error.message);
      }
    }
    
    console.log('\nüèÅ TESTE COMPLETO FINALIZADO!');
    
  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

testModoTrabalhoCompleto();